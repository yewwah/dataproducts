my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
:
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
1:20
seq(0, 10, by-0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length = 30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along( my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
set.seed(10)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
swirl()
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
tf
num_vect >- 6
num_vect >= 6
c("my", "name", "is")
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "haha")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c (44, NA, 5, NA)
x
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_dta
my_data
1/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(-2, -10)]
x[-c(2, 10)]
c(foo = 11, bar = 2, norf = NA)
c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
eit
exit
quit
q()
model <- svm(`@@class@@~.,data = x, cost = 0.2056068)
model <- svm(`@@class@@~.,data = x, cost = 0.2056068)
source('~/FYPScript.R')
source('~/FYPScript.R')
data(iris)
obj <- tune.svm(Species~., data = iris, cost = 2^(2:3), kernel = "linear")
library(e1071)
obj <- tune.svm(Species~., data = iris, cost = 2^(2:3), kernel = "linear")
library(RWeka)
library(e1071)
x <- read.arff("/Users/macbookpro/Desktop/FYP_loving_eval_stem_stop_train.arff")
y <- read.arff("/Users/macbookpro/Desktop/FYP_loving_eval_stem_stop_test.arff")
tuned <- tune.svm(`@@class@@`~., data = x, kernel = "linear", cost = 10^(-1:0))
source('~/FYPScript.R')
tuned
model5 <- svm(`@@class@@`~.,data = x, cost = 0.1355544, kernel = "linear")
tuning <- tune.control(cross = 5)
tuning <- tune.control(cross = 5)
library(e1071)
tuning <- tune.control(cross = 5)
value <- tune.svm(`@@class@@`~., data = x, tune.control = tuning, kernel = "linear", cost = 10^(-1:0))
q()
library(RWeka)
x <- read.arff("use.arff")
q()
x <- read.arff("loving_eval_stop_stem.arff")
library(RWeka)
x <- read.arff("loving_eval_stop_stem.arff")
x[20245]
x[20245, ]
x[0, ]
ls
cls
ls
x[1,]
x[200,]
library(RWeka)
library(e1071)
x <- read.arff("/Users/macbookpro/FYP_latest/Remove 2 _train.arff")
tune.svm(`@@class@@`, data = x, kernel = "linear", cost = 10^(-1:0))
tune.svm(`@@class@@`~., data = x, kernel = "linear", cost = 10^(-1:0))
warnings()
tune.svm(`@@class@@`~., data = x, kernel = "linear", cost = (0.1:0))
source('~/NewSVMtuning.R')
tuning
model <- svm(`@@class@@`~., data = x, kernel = "linear", cost = 0.04569041)
y <- read.arff("/Users/macbookpro/FYP_latest/Remove 2 _test.arff")
pred <- predict(model, x)
pred <- predict(model, y)
library(caret)
ConfusionMatrix(pred,y$`@@class@@`)
confusionMatrix(pred,y$`@@class@@`)
model1 <- svm(`@@class@@`~., data = x, kernel = "linear", cost = 0.1)
pred1 <- predict(model1, y)
confusionMatrix(pred1,y$`@@class@@`)
best.svm(`@@class@@`~., data = x, kernel = "linear", cost = 10^(-1:0))
warnings()
gg <- read.arff("/Users/macbookpro/FYP_latest/c.arff")
model2 <- svm(`@@class@@`~., data = gg, kernel = "linear", cost = 0.1)
x <-read.arff("/Users/macbookpro/Desktop/FYP/remove1_2_train.arff")
best.svm(`@@class@@`~., data = x, kernel = "linear", cost = 10^(-1:0))
y <- read.arff("/Users/macbookpro/Desktop/FYP/remove1_2_test.arff")
y <- read.arff("/Users/macbookpro/Desktop/FYP/remove1_2_test.arff")
model_5 <- svm(`@@class@@`~.,data = x, cost = 0.00001, kernel = "linear")
model_4 <- svm(`@@class@@`~.,data = x, cost = 0.0001, kernel = "linear")
model_3 <- svm(`@@class@@`~.,data = x, cost = 0.001, kernel = "linear")
model_2 <- svm(`@@class@@`~.,data = x, cost = 0.01, kernel = "linear")
model_1 <- svm(`@@class@@`~.,data = x, cost = 0.1, kernel = "linear")
model1 <- svm(`@@class@@`~.,data = x, cost = 1, kernel = "linear")
model2 <- svm(`@@class@@`~.,data = x, cost = 2, kernel = "linear")
model3 <- svm(`@@class@@`~.,data = x, cost = 3, kernel = "linear")
model4 <- svm(`@@class@@`~.,data = x, cost = 4, kernel = "linear")
model5 <- svm(`@@class@@`~.,data = x, cost = 5, kernel = "linear")
pred_5 <- predict(model_5, y)
pred_4 <- predict(model_4, y)
pred_3 <- predict(model_3, y)
pred_2 <- predict(model_2, y)
pred_1 <- predict(model_1, y)
pred1 <- predict(model1, y)
pred2 <- predict(model2, y)
pred3 <- predict(model3, y)
pred4 <- predict(model4, y)
pred5 <- predict(model5, y)
confusionMatrix(model5, y$`@@class@@`)
confusionMatrix(model5, pred5$`@@class@@`)
confusionMatrix(pred5, y$`@@class@@`)
summary(model_5)
summary(model_4)
summary(model_3)
summary(model_2)
summary(model_1)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
source('~/NewSVMtuning.R')
library(e1071)
library(caret)
modelling <- svm(`@@class@@`~. data = x, cost = 0.1, kernel = "linear")
modelling <- svm(`@@class@@`~., data = x, cost = 0.1, kernel = "linear")
prediction <- predict(modelling, y)
confusionMatrix(prediction, y$`@@class@@`)
library(RWeka)
x <- read.arff("/Users/macbookpro/Desktop/remove1_2_train.arff")
y <- read.arff("/Users/macbookpro/Desktop/remove1_2_test.arff")
modelling <- svm(`@@class@@`~., data = x, cost = 0.1, kernel = "linear")
aaa <- predict(modelling, y)
confusionMatrix(aaa, y$`@@class@@`)
summary(modelling)
View(x)
View(x)
x <- read.arff("/Users/macbookpro/Desktop/remove1_2_train.arff")
y <- read.arff("/Users/macbookpro/Desktop/remove1_2_test.arff")
model<- svm(`@@class@@`~., data = x, cost = 0.1, kernel = "linear", gamma = 0.0)
summary(model)
pred <-predict(model, y)
confusionMatrix(model, y$`@@class@@`)
confusionMatrix(pred, y$`@@class@@`)
model<- svm(`@@class@@`~., data = x, cost = 1, kernel = "linear", gamma = 0.0)
prediction <- predict(model, y)
confusionMatrix(prediction,y$`@@class@@`)
source('~/FYPScript.R')
library(datasets)
data(cars)
with(cars, plot(speed,distance))
cars
with(cars, plot(speed,dist))
pml.training <- read.csv("~/Downloads/pml-training.csv", header=FALSE)
View(pml.training)
View(cars)
View(cars)
View(pml.training)
View(pml.training)
View(pml.training)
data = pml.training
data
data = data[ , colSums(is.na(trainingOrg)) == 0]
data_cleaned = data[ , colSums(is.na(data)) == 0]
data_cleaned
source('~/practical_machine_learning_submit.R')
source('~/.active-rstudio-document')
table(pred)
confusionMatrix(pred, testing$classe)
source('~/practical_machine_learning_submit.R')
source('~/practical_machine_learning_submit.R')
source('~/practical_machine_learning_submit.R')
source('~/Dropbox/Assignments/regress.R')
library(knitr)
data(mtcars)
x = mtcars
x
factor(x#cyl)
factor(x#cyl)
factor(x$cyl)
factor(x$am)
cleanedData<- cleanedData[-(1:7)]
getwd()
data <- read.csv("pml-training.csv")
data <- read.csv("pml-training.csv")
test_data <- read.csv("pml-testing.csv")
data <- read.csv("pml-training1.csv")
data <- read.csv("./pml-training1.csv")
```{r}
data <- read.csv("./pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
```
```{r}
data <- read.csv("./pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
```
```{r}
data <- read.csv("pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
```
```{r}
```{r}
data <- read.csv("pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
```
data <- read.csv("pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
data <- read.csv("pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
?write.table
?predict
predict
predict[1]
predictionsB2[1]
predictionsB2 <- predict(model, cleanedtestData, type = "class")
model <- svm(training$classe ~., data = training)
library(caret)
library(e1071)
model <- svm(training$classe ~., data = training)
predictionsB2 <- predict(model, cleanedtestData, type = "class")
test_data <- read.csv("pml-testing.csv")
test_data[,i] = as.numeric(as.character(test_data[,i]))
cleanedData <- data[colSums(is.na(data)) == 0]
cleanedtestData <- test_data[colSums(is.na(test_data)) == 0]
cleanedData<- cleanedData[-(1:7)]
cleanedtestData<- cleanedtestData[-(1:7)]
predictionsB2 <- predict(model, cleanedtestData, type = "class")
predictionsB2[]1
predictionsB2[!]
predictionsB2[1]
predictionsB2[2]
?write.table
install.packages("shiny")
?predict
?svm
library(e1071)
?svm
library(e1071)
data <- read.csv("./Documents/pml-training1.csv")
testing <- cleanedData[-pData,]
library(caret)
library(e1071)
data <- read.csv("./Documents/pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
for(i in c(8:ncol(data)-1))
{
data[,i] = as.numeric(as.character(data[,i]))
test_data[,i] = as.numeric(as.character(test_data[,i]))
}
cleanedData <- data[colSums(is.na(data)) == 0]
cleanedtestData <- test_data[colSums(is.na(test_data)) == 0]
cleanedData<- cleanedData[-(1:7)]
cleanedtestData<- cleanedtestData[-(1:7)]
pData <- createDataPartition(y=cleanedData$classe, p=0.8, list=FALSE )
training <- cleanedData[pData,]
testing <- cleanedData[-pData,]
library(caret)
library(e1071)
data <- read.csv("./Documents/pml-training1.csv")
test_data <- read.csv("pml-testing.csv")
for(i in c(8:ncol(data)-1))
{
data[,i] = as.numeric(as.character(data[,i]))
test_data[,i] = as.numeric(as.character(test_data[,i]))
}
cleanedData <- data[colSums(is.na(data)) == 0]
cleanedtestData <- test_data[colSums(is.na(test_data)) == 0]
cleanedData<- cleanedData[-(1:7)]
cleanedtestData<- cleanedtestData[-(1:7)]
pData <- createDataPartition(y=cleanedData$classe, p=0.8, list=FALSE )
training <- cleanedData[pData,]
testing <- cleanedData[-pData,]
source('~/.active-rstudio-document')
head(attr(model, "prob"))
head(attr(model, "probabilities"))
head(attr(pred, "probabilities"))
pred<- predict(model, testing, probability = TRUE)
table(pred)
confusionMatrix(pred, testing$classe)
predResult <- predict(model, cleanedtestData, type = "class")
head(attr(pred, "probabilities"))
(pred, "probabilities"))
(pred, "probabilities")
attr(pred, "probabilities")
a = df[]
?df
?data.frame
a = data.frame("haha", 1)
a
?hist
hist(a)
hist(a$haha)
hist(a$X1)
a = c(2,3,5)
b = c(1:10)
b
a
z = data.frame(a, b)
z = data.frame(a, b[,3])
z = data.frame(a, b[,4])
z = data.frame(a, b[,3])
b
b[,3]
b[3,]
b
b[3,1]
b[1,1]
b[0,1]
b[0,0]
b[1:3]
z = data.frame(a, b[1:3])
z
hist(z)
hist(z)
hist(z#a)
hist(z$a)
z = data.frame(a, b[,4])
a
a = c("a", 'b', 'c')
z = data.frame(a, b[,4])
z = data.frame(a, b[1:3])
z
a = c("a", 'b')
a
z = data.frame(a, b[1:2])
z = data.frame(a, b[1:2])
z
?data.frame
a = ("a","b","c",'d',"e")
a = c("a","b","c",'d',"e")
a
b = c(1,2,3,4,5)
z = data.frame(a, b)
z
a = c("a", 1)
b = c("b",2)
c = c('c',3)
d = c('c',4)
e = c('e',5)
c = c('d',4)
d
c
d
d = c('d',4)
d
c
c = c('c',3)
c
data.frame(a,b,c,d,e)
z = data.frame(a,b,c,d,e)
z
z = z[1,]
z
z = data.frame(a,b,c,d,e)
z
z = z[2,]
z
hist(z)
hist(z4a)
hist(z$a)
hist(z$a)
z
?hist
z = a
a
hist(z$a)
z = data.frame(a,b,c,d,e)
z
z
z = z[2,]
z
z = c(z[2,])
z
z
hist(z)
z
z = z[2,]
z
z = data.frame(a,b,c,d,e)
z
hist(as.numeric(z[2,]))
z = data.frame(a,b,c,d,e, stringsAsFactors = FALSE)
hist(as.numeric(z[2,]))
?data.frame
z = data.frame(a,b,c,d,e)
hist(z)
z
levels(z)
levels(z$a)
levels(z$b)
levels(z$c)
source('~/.active-rstudio-document')
hist(pred)
hist(as.numeric(pred)
)
pred
z = data.frame(pred, stringsAsFactors = false)
hist(z)
z
z
z = data.frame(pred[,], stringsAsFactors = false)
z = data.frame(pred[,], stringsAsFactors = false)
pred
pred[1,]
pred[1,]
class(pred)
levels(pred)
pred[1]
pred[0]
head(pred)
?predict
pred[2,]
dim(pred)
?dim
nrow(pred)
nrow(col)
data.frame.factor(pred)
i <- sapply(bob, is.factor)
bob[i] <- lapply(bob[i], as.character)
i <- sapply(pred, is.factor)
bob[i] <- lapply(pred[i], as.character)
i <- sapply(pred, is.factor)
pred[i] <- lapply(pred[i], as.character)
pred
hist(as.numeric(pred))
hist(as.numeric(pred), stringsAsFactors = false)
i <- sapply(pred, is.factor)
pred[i] <- lapply(pred[i], as.numeric)
i <- sapply(pred, is.factor)
pred[i] <- lapply(pred[i], as.numeric)
pred
as.numeric(pred)
shiny::runApp('test')
shiny::runApp('test')
